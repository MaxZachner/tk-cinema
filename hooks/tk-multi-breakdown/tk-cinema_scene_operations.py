# Copyright (c) 2013 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

from tank import Hook
import c4d
import os


__author__ = "Mykhailo Datsyk"
__contact__ = "https://www.linkedin.com/in/mykhailo-datsyk/"


def get_contexts(context, result=None):
    """
    Returns all the subcontexts of the given context recursively
    """
    if result is None:
        result = []

    result.append(context)
    subcontext_count = context.get_context_count()
    for i in range(subcontext_count):
        subcontext = context.get_context(i)
        get_contexts(subcontext, result=result)

    return result

def get_all_xrefs(op, filter, output, docpath):
    while op:
        if filter(op):
            if docpath in op[c4d.ID_CA_XREF_FILE]:
                path = op[c4d.ID_CA_XREF_FILE]
            else:
                path = os.path.abspath(os.path.join(docpath, op[c4d.ID_CA_XREF_FILE]))
            output.append(
                {
                    "attr": op.GetName(),
                    "type": "reference",
                    "path": path,
                    "node": op,
                    }
                )
        get_all_xrefs(op.GetDown(), filter, output, docpath)
        op = op.GetNext()
    return output


class BreakdownSceneOperations(Hook):
    """
    Breakdown operations for Cinema.

    This implementation handles detection of cinema file geometric, 
    alembic, usd and texture nodes.
    """

    def scan_scene(self):
        """
        The scan scene method is executed once at startup and its purpose is
        to analyze the current scene and return a list of references that are
        to be potentially operated on.

        The return data structure is a list of dictionaries. Each scene 
        reference that is returned should be represented by a dictionary with 
        three keys:

        - "attr": The filename attribute of the 'node' that is to be operated
           on. Most DCCs have a concept of a node, attribute, path or some other
           way to address a particular object in the scene.
        - "type": The object type that this is. This is later passed to the
           update method so that it knows how to handle the object.
        - "path": Path on disk to the referenced object.

        Toolkit will scan the list of items, see if any of the objects matches
        any templates and try to determine if there is a more recent version
        available. Any such versions are then displayed in the UI as out of 
        date.
        """
        refs = []
        
        doc = c4d.documents.GetActiveDocument()
        refs = get_all_xrefs(doc.GetFirstObject(), lambda x: x.CheckType(c4d.Oxref), [], doc.GetDocumentPath())

        return refs

    def update(self, items):
        """
        Perform replacements given a number of scene items passed from the app.

        Once a selection has been performed in the main UI and the user clicks
        the update button, this method is called.

        The items parameter is a list of dictionaries on the same form as was
        generated by the scan_scene hook above. The path key now holds
        the that each attribute should be updated *to* rather than the current
        path.
        """

        engine = self.parent.engine
        doc = c4d.documents.GetActiveDocument()

        for i in items:
            node = i["node"]
            node_type = i["type"]
            new_path = i["path"]
            new_name = i["node"].GetName()

            if node_type == "reference":
                # cinema reference
                engine.log_debug("Cinema Xref %s: Updating to version %s" % (node, new_path))
                parent = node.GetUp()
                node.Remove()
                xref = c4d.BaseObject(c4d.Oxref)
                if parent:
                    xref.InsertUnder(parent)
                else:
                    doc.InsertObject(xref)
                xref.SetParameter(c4d.ID_CA_XREF_FILE, new_path, c4d.DESCFLAGS_SET_USERINTERACTION)
                xref.SetName(new_name)
                c4d.EventAdd()